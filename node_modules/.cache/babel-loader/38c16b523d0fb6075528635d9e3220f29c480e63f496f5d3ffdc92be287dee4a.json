{"ast":null,"code":"var _jsxFileName = \"C:\\\\www\\\\DONE\\\\to-do-list\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport Header from \"./components/Header\";\nimport AddTask from \"./components/AddTask\";\nimport TasksInfo from \"./components/TasksInfo\";\nimport DeleteTask from \"./components/DeleteTask\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([{\n    id: 0,\n    complete: true,\n    content: \"Complete online JavaScript course\"\n  }, {\n    id: 1,\n    complete: false,\n    content: \"Jog around the park 3x\"\n  }, {\n    id: 2,\n    complete: false,\n    content: \"10 minutes meditation\"\n  }, {\n    id: 3,\n    complete: false,\n    content: \"Read for 1 hour\"\n  }, {\n    id: 4,\n    complete: false,\n    content: \"Pick up groceries\"\n  }, {\n    id: 5,\n    complete: false,\n    content: \"Complete Todo App on Frontend Mentor\"\n  }]);\n  const [filter, setFilter] = useState(\"all\");\n  useEffect(() => {\n    const storedTasks = localStorage.getItem(\"tasks\");\n    if (storedTasks) {\n      setTasks(JSON.parse(storedTasks));\n    }\n  }, []);\n  const handleFilter = filter => {\n    setFilter(filter);\n  };\n  const handleToggleTheme = () => {\n    document.body.classList.toggle(\"dark\");\n  };\n  const handleNewTaskSubmit = event => {\n    event.preventDefault();\n    const content = event.target.newTodo.value;\n    event.target.newTodo.value = \"\";\n    const newTaskId = Math.ceil(Math.random() * 1000);\n\n    // adding the new task to the state\n    const newTasks = [...tasks].concat({\n      id: newTaskId,\n      content,\n      complete: false\n    });\n    setTasks(newTasks);\n    localStorage.setItem(\"tasks\", JSON.stringify(newTasks));\n  };\n\n  // toggling the adjacent checkbox when the label element of a task is clicked\n  const handleLabelClick = adjacentCheckbox => {\n    const isChecked = adjacentCheckbox.checked;\n    adjacentCheckbox.checked = !isChecked;\n  };\n\n  // this event handler is triggered when the checked property changes due to a click on the task's checkbox or label\n  const handleCheckboxChange = checkboxId => {\n    // toggle the task's 'complete' value in the state\n    const newTasks = tasks.map(e => e.id === checkboxId ? {\n      ...e,\n      complete: !e.complete\n    } : e);\n    setTasks(newTasks);\n    localStorage.setItem(\"tasks\", JSON.stringify(newTasks));\n  };\n\n  // handles deleting a task with its .delete-task button\n  const handleDeleteTask = id => {\n    const newTasks = tasks.filter(e => e.id !== id);\n    setTasks(newTasks);\n    localStorage.setItem(\"tasks\", JSON.stringify(newTasks));\n  };\n  const handleClearCompleted = () => {\n    const newTasks = tasks.filter(e => e.complete === false);\n    setTasks(newTasks);\n    localStorage.setItem(\"tasks\", JSON.stringify(newTasks));\n  };\n\n  // handles dropping a task over another, also works with the keyboard\n  const handleDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    // user has dropped the tasks outside of the droppable area\n    if (!destination) return;\n\n    // user has put the item back to its original place\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    // Copying the tasks to avoid mutating state\n    const copyTasks = [...tasks];\n\n    // Removing the task from its previous place\n    copyTasks.splice(source.index, 1);\n\n    // Searching in the state for the dropped task's information (currently we only have its id, in a string type)\n    const taskMoved = tasks.find(e => e.id === Number(draggableId));\n\n    // Placing the task at its new place\n    copyTasks.splice(destination.index, 0, taskMoved);\n    setTasks(copyTasks);\n    localStorage.setItem(\"tasks\", JSON.stringify(copyTasks));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      toggleTheme: handleToggleTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(AddTask, {\n        addTask: handleNewTaskSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 5\n      }, this), tasks.length === 0 ? null : /*#__PURE__*/_jsxDEV(DeleteTask, {\n        tasks: tasks,\n        filter: filter,\n        labelClick: handleLabelClick,\n        deleteTask: handleDeleteTask,\n        updateStatus: handleCheckboxChange,\n        reorderTasks: handleDragEnd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(TasksInfo, {\n        tasks: tasks,\n        filter: filter,\n        updateFilter: handleFilter,\n        clearCompleted: handleClearCompleted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 5\n      }, this), tasks.length ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"list-instructions\",\n        children: \"Drag and drop to reorder list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 6\n      }, this) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"TYOd//KWMbSEghY7FW0pond6h+o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","AddTask","TasksInfo","DeleteTask","useEffect","useState","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","id","complete","content","filter","setFilter","storedTasks","localStorage","getItem","JSON","parse","handleFilter","handleToggleTheme","document","body","classList","toggle","handleNewTaskSubmit","event","preventDefault","target","newTodo","value","newTaskId","Math","ceil","random","newTasks","concat","setItem","stringify","handleLabelClick","adjacentCheckbox","isChecked","checked","handleCheckboxChange","checkboxId","map","e","handleDeleteTask","handleClearCompleted","handleDragEnd","result","destination","source","draggableId","droppableId","index","copyTasks","splice","taskMoved","find","Number","children","toggleTheme","fileName","_jsxFileName","lineNumber","columnNumber","addTask","length","labelClick","deleteTask","updateStatus","reorderTasks","updateFilter","clearCompleted","className","_c","$RefreshReg$"],"sources":["C:/www/DONE/to-do-list/src/App.js"],"sourcesContent":["import Header from \"./components/Header\";\r\nimport AddTask from \"./components/AddTask\";\r\nimport TasksInfo from \"./components/TasksInfo\";\r\nimport DeleteTask from \"./components/DeleteTask\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction App() {\r\n\tconst [tasks, setTasks] = useState([\r\n\t\t{\r\n\t\t\tid: 0,\r\n\t\t\tcomplete: true,\r\n\t\t\tcontent: \"Complete online JavaScript course\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\tcomplete: false,\r\n\t\t\tcontent: \"Jog around the park 3x\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 2,\r\n\t\t\tcomplete: false,\r\n\t\t\tcontent: \"10 minutes meditation\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 3,\r\n\t\t\tcomplete: false,\r\n\t\t\tcontent: \"Read for 1 hour\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 4,\r\n\t\t\tcomplete: false,\r\n\t\t\tcontent: \"Pick up groceries\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 5,\r\n\t\t\tcomplete: false,\r\n\t\t\tcontent: \"Complete Todo App on Frontend Mentor\",\r\n\t\t},\r\n\t]);\r\n\tconst [filter, setFilter] = useState(\"all\");\r\n\r\n\tuseEffect(() => {\r\n\t\tconst storedTasks = localStorage.getItem(\"tasks\");\r\n\t\tif (storedTasks) {\r\n\t\t\tsetTasks(JSON.parse(storedTasks));\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst handleFilter = (filter) => {\r\n\t\tsetFilter(filter);\r\n\t};\r\n\r\n\tconst handleToggleTheme = () => {\r\n\t\tdocument.body.classList.toggle(\"dark\");\r\n\t};\r\n\r\n\tconst handleNewTaskSubmit = (event) => {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tconst content = event.target.newTodo.value;\r\n\t\tevent.target.newTodo.value = \"\";\r\n\t\tconst newTaskId = Math.ceil(Math.random() * 1000);\r\n\r\n\t\t// adding the new task to the state\r\n\t\tconst newTasks = [...tasks].concat({\r\n\t\t\tid: newTaskId,\r\n\t\t\tcontent,\r\n\t\t\tcomplete: false,\r\n\t\t});\r\n\t\tsetTasks(newTasks);\r\n\t\tlocalStorage.setItem(\"tasks\", JSON.stringify(newTasks));\r\n\t};\r\n\r\n\t// toggling the adjacent checkbox when the label element of a task is clicked\r\n\tconst handleLabelClick = (adjacentCheckbox) => {\r\n\t\tconst isChecked = adjacentCheckbox.checked;\r\n\t\tadjacentCheckbox.checked = !isChecked;\r\n\t};\r\n\r\n\t// this event handler is triggered when the checked property changes due to a click on the task's checkbox or label\r\n\tconst handleCheckboxChange = (checkboxId) => {\r\n\t\t// toggle the task's 'complete' value in the state\r\n\t\tconst newTasks = tasks.map((e) =>\r\n\t\t\te.id === checkboxId ? { ...e, complete: !e.complete } : e\r\n\t\t);\r\n\t\tsetTasks(newTasks);\r\n\t\tlocalStorage.setItem(\"tasks\", JSON.stringify(newTasks));\r\n\t};\r\n\r\n\t// handles deleting a task with its .delete-task button\r\n\tconst handleDeleteTask = (id) => {\r\n\t\tconst newTasks = tasks.filter((e) => e.id !== id);\r\n\t\tsetTasks(newTasks);\r\n\t\tlocalStorage.setItem(\"tasks\", JSON.stringify(newTasks));\r\n\t};\r\n\r\n\tconst handleClearCompleted = () => {\r\n\t\tconst newTasks = tasks.filter((e) => e.complete === false);\r\n\t\tsetTasks(newTasks);\r\n\t\tlocalStorage.setItem(\"tasks\", JSON.stringify(newTasks));\r\n\t};\r\n\r\n\t// handles dropping a task over another, also works with the keyboard\r\n\tconst handleDragEnd = (result) => {\r\n\t\tconst { destination, source, draggableId } = result;\r\n\r\n\t\t// user has dropped the tasks outside of the droppable area\r\n\t\tif (!destination) return;\r\n\r\n\t\t// user has put the item back to its original place\r\n\t\tif (\r\n\t\t\tdestination.droppableId === source.droppableId &&\r\n\t\t\tdestination.index === source.index\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Copying the tasks to avoid mutating state\r\n\t\tconst copyTasks = [...tasks];\r\n\r\n\t\t// Removing the task from its previous place\r\n\t\tcopyTasks.splice(source.index, 1);\r\n\r\n\t\t// Searching in the state for the dropped task's information (currently we only have its id, in a string type)\r\n\t\tconst taskMoved = tasks.find((e) => e.id === Number(draggableId));\r\n\r\n\t\t// Placing the task at its new place\r\n\t\tcopyTasks.splice(destination.index, 0, taskMoved);\r\n\r\n\t\tsetTasks(copyTasks);\r\n\t\tlocalStorage.setItem(\"tasks\", JSON.stringify(copyTasks));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Header toggleTheme={handleToggleTheme} />\r\n\t\t\t<main>\r\n\t\t\t\t<AddTask addTask={handleNewTaskSubmit} />\r\n\t\t\t\t{tasks.length === 0 ? null : (\r\n\t\t\t\t\t<DeleteTask\r\n\t\t\t\t\t\ttasks={tasks}\r\n\t\t\t\t\t\tfilter={filter}\r\n\t\t\t\t\t\tlabelClick={handleLabelClick}\r\n\t\t\t\t\t\tdeleteTask={handleDeleteTask}\r\n\t\t\t\t\t\tupdateStatus={handleCheckboxChange}\r\n\t\t\t\t\t\treorderTasks={handleDragEnd}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t\t<TasksInfo\r\n\t\t\t\t\ttasks={tasks}\r\n\t\t\t\t\tfilter={filter}\r\n\t\t\t\t\tupdateFilter={handleFilter}\r\n\t\t\t\t\tclearCompleted={handleClearCompleted}\r\n\t\t\t\t/>\r\n\t\t\t\t{tasks.length ? (\r\n\t\t\t\t\t<p className=\"list-instructions\">Drag and drop to reorder list</p>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t\"\"\r\n\t\t\t\t)}\r\n\t\t\t</main>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}