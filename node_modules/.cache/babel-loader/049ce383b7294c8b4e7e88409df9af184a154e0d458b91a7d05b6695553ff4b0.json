{"ast":null,"code":"var _jsxFileName = \"C:\\\\www\\\\DONE\\\\to-do-list\\\\src\\\\components\\\\DeleteTask.js\";\nimport React from 'react';\nimport SingleTask from './SingleTask';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeleteTask = ({\n  tasks,\n  filter,\n  labelClick,\n  deleteTask,\n  updateStatus,\n  reorderTasks\n}) => {\n  // generating valid HTML id value from the task's content\n  const validId = (content, id) => content.toLowerCase().replace(/ /g, \"-\") + id;\n  let tasksDisplayed = tasks;\n  if (filter === \"completed\") {\n    tasksDisplayed = tasks.filter(e => e.complete === true);\n  } else if (filter === \"active\") {\n    tasksDisplayed = tasks.filter(e => e.complete === false);\n  }\n  const handleDragEnd = result => {\n    reorderTasks(result);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"delete-checked-tasks-form\",\n    className: \"delete-checked-tasks-form\",\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"tasks\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"ul\", {\n          ...provided.droppableProps,\n          ref: provided.innerRef,\n          children: [tasksDisplayed.map((e, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: `${e.id}`,\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              children: /*#__PURE__*/_jsxDEV(SingleTask, {\n                id: e.id,\n                validId: validId(e.content, e.id),\n                content: e.content,\n                complete: e.complete,\n                labelClick: labelClick,\n                deleteTask: deleteTask,\n                updateStatus: updateStatus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 21\n            }, this)\n          }, e.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_c = DeleteTask;\nexport default DeleteTask;\nvar _c;\n$RefreshReg$(_c, \"DeleteTask\");","map":{"version":3,"names":["React","SingleTask","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","DeleteTask","tasks","filter","labelClick","deleteTask","updateStatus","reorderTasks","validId","content","id","toLowerCase","replace","tasksDisplayed","e","complete","handleDragEnd","result","className","children","onDragEnd","droppableId","provided","droppableProps","ref","innerRef","map","index","draggableId","draggableProps","dragHandleProps","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","_c","$RefreshReg$"],"sources":["C:/www/DONE/to-do-list/src/components/DeleteTask.js"],"sourcesContent":["import React from 'react'\r\nimport SingleTask from './SingleTask';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nconst DeleteTask = ({\r\n  tasks,\r\n  filter,\r\n  labelClick,\r\n  deleteTask,\r\n  updateStatus,\r\n  reorderTasks\r\n}) => {\r\n\r\n  // generating valid HTML id value from the task's content\r\n  const validId = (content, id) => content.toLowerCase().replace(/ /g, \"-\") + id;\r\n\r\n  let tasksDisplayed = tasks\r\n\r\n  if (filter === \"completed\") {\r\n    tasksDisplayed = tasks.filter(e => e.complete === true)\r\n  } else if (filter === \"active\") {\r\n    tasksDisplayed = tasks.filter(e => e.complete === false)\r\n  }\r\n\r\n  const handleDragEnd = (result) => {\r\n    reorderTasks(result)\r\n  }\r\n\r\n  return (\r\n    <form id=\"delete-checked-tasks-form\"\r\n      className=\"delete-checked-tasks-form\">\r\n      <DragDropContext onDragEnd={handleDragEnd}>\r\n        <Droppable\r\n          droppableId='tasks'\r\n        >\r\n          {(provided) => (\r\n            <ul\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              {tasksDisplayed.map((e, index) =>\r\n                <Draggable\r\n                  key={e.id}\r\n                  draggableId={`${e.id}`}\r\n                  index={index}\r\n                >\r\n                  {(provided) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                    >\r\n                      <SingleTask\r\n                        id={e.id}\r\n                        validId={validId(e.content, e.id)}\r\n                        content={e.content}\r\n                        complete={e.complete}\r\n                        labelClick={labelClick}\r\n                        deleteTask={deleteTask}\r\n                        updateStatus={updateStatus}\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              )}\r\n              {provided.placeholder}\r\n            </ul>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n\r\n    </form >\r\n  )\r\n};\r\n\r\nexport default DeleteTask"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}